//question 73
int m = arr1.size();
        int n = arr2.size();
        sort(arr2.begin(), arr2.end());
        int cnt = 0;
        for (int i = 0; i < m; i++) {
            int l = 0, r = n-1, x = arr1[i] - d, y = arr1[i] + d;
            
            while (l <= r) {
                int mid = l+ (r-l)/2;
                if (arr2[mid] < x) {
                    l = mid + 1;
                } 
                else if (arr2[mid] > y) {
                    r = mid - 1;
                } 
                else {
                    cnt++; break;
                }
            }
        }
        return m - cnt;
//question 74
class Solution {
public:
   int maxSubarrayLength(vector<int>& nums, int k) {
    unordered_map<int, int> freq;
    int ans = 0;
    for(int i = 0, j = 0; j < nums.size(); ++j){
        freq[nums[j]]++;
        while(freq[nums[j]] > k){
            freq[nums[i]]--;  i++;
        }
        ans = max(ans, j - i + 1);
    }
    return ans;
}
};
//question 75
class Solution {
public:
    int longestString(int x, int y, int z) {
        int mn = min(x,y);
        if (x == y)
            return (4 * x + z * 2);
        else 
            return (2 * mn + (mn + 1) * 2 + z * 2);
    }
};
