//question 58
class Solution {
public:
    
    bool isClockwiseTurn(vector<int> &a, vector<int> &b, vector<int> &c) {
        int xa = a[0], xb = b[0], xc = c[0];
        int ya = a[1], yb = b[1], yc = c[1];
        bool isConvex = (((yc - yb) * (xb - xa)) - ((yb - ya) * (xc - xb))) >= 0;
        return isConvex;
    }
    
    vector<vector<int>> outerTrees(vector<vector<int>>& trees) {
        vector<vector<int>> convexHull;
        int n = trees.size();
       
        auto cmp = [&](vector<int> &a, vector<int> &b) {
            if(a[0] < b[0]) {
                return true;
            } else if (a[0] == b[0] && a[1] < b[1]) {
                return true;
            }
            return false;
        };
        
        sort(trees.begin(), trees.end(), cmp);
        
        for(int i = 0; i < n; i++) {
            while(convexHull.size() > 1 && !isClockwiseTurn(convexHull[convexHull.size() - 2], convexHull[convexHull.size() - 1], trees[i])) {
                convexHull.pop_back();
            }
            convexHull.push_back(trees[i]);
        }
        
        for(int i = n - 1; i >= 0; i--) {
            while(convexHull.size() > 1 && !isClockwiseTurn(convexHull[convexHull.size() - 2], convexHull[convexHull.size() - 1], trees[i])) {
                convexHull.pop_back();
            }
            convexHull.push_back(trees[i]);
        }
        convexHull.pop_back(); 
        sort(convexHull.begin(), convexHull.end(), cmp);
        convexHull.erase(unique(convexHull.begin(), convexHull.end()), convexHull.end());
        return convexHull;
    }
};
//question 59
class Solution {
public:
    int equalSubstring(string s, string t, int maxCost) {
        int n = s.length(), i = 0, j;
        for (j = 0; j < n; ++j) {
            if ((maxCost -= abs(s[j] - t[j])) < 0)
                maxCost += abs(s[i] - t[i++]);
        }
        return j - i;
    }
};
//question 60
class Solution {
public:
    int getLastMoment(int n, vector<int>& left, vector<int>& right) {
        // Initialize a variable to keep track of the maximum time
        int time = 0;

        // Iterate through the positions of ants moving to the left
        for (int pos : left) {
            // Update the maximum time if the current left-moving ant's position is greater
            // than the previously recorded maximum time
            time = max(time, pos);
        }

        // Iterate through the positions of ants moving to the right
        for (int pos : right) {
            // Update the maximum time if the current right-moving ant's position (relative to
            // the right end of the plank) is greater than the previously recorded maximum time
            time = max(time, n - pos);
        }

        // The final 'time' variable contains the maximum time, which is when the last ant(s)
        // fall off the plank, so return it as the result.
        return time;
    }
};
