//question 67
class Solution {
public:
    int findNumberEquivalent(string &s){
        int number=0;
        for(auto &ch:s){
			//Set the (ch-'a')th bit
            number|=(1<<(ch-'a'));
        }
        return number;
    }
    
    int wordCount(vector<string>& startWords, vector<string>& targetWords) {
    
        set<int>st;
        
        for(auto &s:startWords){
            int number=findNumberEquivalent(s);
            st.insert(number);
        }
        
        int ans=0;
        
        for(auto &w:targetWords){
            int targetNumber=findNumberEquivalent(w);
            for(int i=0;i<w.size();i++){
				//unset the (w[i]-'a')th bit.
                int candidate=(targetNumber - ( 1<<(w[i]-'a') ));
                if(st.find(candidate)!=st.end()){
                    ans++;
                    break;
                }
            }
        }
        return ans;
    }
};
//question 68
class Solution {
public:
    int findNumberEquivalent(string &s){
        int number=0;
        for(auto &ch:s){
			//Set the (ch-'a')th bit
            number|=(1<<(ch-'a'));
        }
        return number;
    }
    
    int wordCount(vector<string>& startWords, vector<string>& targetWords) {
    
        set<int>st;
        
        for(auto &s:startWords){
            int number=findNumberEquivalent(s);
            st.insert(number);
        }
        
        int ans=0;
        
        for(auto &w:targetWords){
            int targetNumber=findNumberEquivalent(w);
            for(int i=0;i<w.size();i++){
				//unset the (w[i]-'a')th bit.
                int candidate=(targetNumber - ( 1<<(w[i]-'a') ));
                if(st.find(candidate)!=st.end()){
                    ans++;
                    break;
                }
            }
        }
        return ans;
    }
};
//question 69
#define ll unsigned long long int
class Solution {
public:
    ll power(ll a, ll b) {
    ll res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a;
        a = a * a;
        b >>= 1;
    }
    return res;
      }
    ll powm(ll a, ll b, ll m) {
    a %= m;
    ll res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}
    
    int minNonZeroProduct(int p) {
        if(p==1)return 1;
        if(p==2)return 6;
        
        
      ll z=power(2,(ll)p);         //2^p
        ll m=1000000007;
        ll x=z-1;                //2^p - 1
        ll y=z/2-1;              //2^(p-1) -1
        ll v=z-2;                //  2^p -2
        ll ans=powm(v,y,m);      //modular exponentiation
        ans=((ans%m)*(x%m))%m;   
        return (int)ans;
    }
};
