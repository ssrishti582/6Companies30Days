//question 40
class Solution {
public:
    bool isValidSerialization(string preorder) {
        if(preorder.empty())return false;
        int cnt=1,i=0;
        while(i<preorder.size()){
            if(preorder[i]=='#')cnt--;
            else cnt++;
            if(cnt==0)break;
            while(i<preorder.size()&&preorder[i++]!=',');
        }
        return cnt==0&&i==preorder.size()-1;
    }
};
//question41
class Solution {
public:
    
    static bool comparator(pair<string,int> p1, pair<string,int> p2)
    {
        if(p1.second>p2.second || (p1.second==p2.second && p1.first<p2.first))
            return true;
        return false;
    }
    
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string,int> m1;
        
        for(int i=0; i<words.size(); i++)
            m1[words[i]]++;
        
        vector<pair<string,int>> v1;
        for(auto it=m1.begin(); it!=m1.end(); it++)
            v1.push_back({it->first,it->second});
        
        sort(v1.begin(),v1.end(),comparator);
        
        vector<string> ans;
        for(int i=0; i<k; i++)
        {
            ans.push_back(v1[i].first);
        }
        
        return ans;
    }
};
//quesstion42
class Solution {
public:
    int countBattleships(vector<vector<char>>& board) {
        int ans = 0;
        for (int i = 0; i < board.size(); i++)
            for (int j = 0; j < board[0].size(); j++)
                if ('X' == board[i][j] && (!i || '.' == board[i - 1][j]) && (!j || '.' == board[i][j - 1]))
                    ans++;
        return ans;
    }
};
