//question 46
class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        if (!root) { 
			// checking if the root is null or not.
            return root;
        }
        
        if (root->val >= low && root->val <= high) { 
            // checking root's val should be equal or inside the low and high.
            root->left = trimBST(root->left, low, high);
            root->right = trimBST(root->right, low, high);
            return root;
        }
        
        if (root->val < low) {
            // return right subtree if the root is less than low.
            return trimBST(root->right, low, high);
        }
            
        // return left subtree if the root is greater than high.
        return trimBST(root->left, low, high);
    }
};
//question 47
class Solution {
public:
    int longestString(int x, int y, int z) {
        int mn = min(x,y);
        if (x == y)
            return (4 * x + z * 2);
        else 
            return (2 * mn + (mn + 1) * 2 + z * 2);
    }
};
//question 48
class Solution 
{
public:
    int minimumLengthEncoding(vector<string>& words) 
    {
        for(auto &word: words) //reverse each word in words i.e. time->emit
            reverse(word.begin(), word.end());
        
        sort(words.begin(), words.end()); //sort words in increasing order of their length
        
        int n = words.size();
        string str = words[0]; 
        int ans=0, wordsize;
        
        //compare adjacent words if both are different we add wordsize+1 in ans, +1 for #
        for(int i=1;i<n;i++) 
        {
            wordsize = str.size();
            if(words[i].compare(0, wordsize, str)) //if both words are same return 0 else 1 
                ans += 1+wordsize;
            str = words[i];
        }
        ans += str.size()+1; //to handle last word and condition when size of words is 1
        return ans;
    }
};
