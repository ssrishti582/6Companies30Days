//question 85
class Solution {
public:
    vector<int> countSubgraphsForEachDiameter(int n, vector<vector<int>>& edges) {
        int INF = n; // Since cities form a tree so maximum distance between 2 cities always < n
        vector<vector<int>> dist(n, vector<int>(n, INF));
        for (auto& e : edges) 
            dist[e[0]-1][e[1]-1] = dist[e[1]-1][e[0]-1] = 1;
        
        for (int k = 0; k < n; k++)
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
        
        vector<int> ans(n - 1, 0);
        for (int state = 0; state < (1 << n); state++) {
            int d = maxDistance(state, dist, n);
            if (d > 0) ans[d - 1] += 1;
        }
        return ans;
    }
    
    int maxDistance(int state, vector<vector<int>>& dist, int n) {
        int cntEdge = 0, cntCity = 0, maxDist = 0;
        for (int i = 0; i < n; i++) {
            if (((state >> i) & 1) == 0) continue; // Skip if city `i` not in our subset
            cntCity += 1;
            for (int j = i + 1; j < n; j++) {
                if (((state >> j) & 1) == 0) continue; // Skip if city `j` not in our subset
                cntEdge += dist[i][j] == 1;
                maxDist = max(maxDist, dist[i][j]);
            }
        }
        if (cntEdge != cntCity - 1) return 0; // Subset form an invalid subtree!
        return maxDist;
    }
};
//question 86
class Solution {
    const vector<int> delta = {-1, 0, 1, 0};
    unordered_map<int, int> low, tin;
    int timer = 0;
    bool articulation_point = false;

    void dfs(unordered_map<int, vector<int>> &adj, int u, int par) {
        low[u] = tin[u] = ++timer;
        int child_count = 0;
        for(int v: adj[u])
            if(v != par) {
                if(low.count(v)) {
                    low[u] = min(low[u], tin[v]);
                } else {
                    child_count++;
                    dfs(adj, v, u);
                    if(low[v] >= tin[u] && par != -1) {
                        articulation_point = true;
                    }
                    low[u] = min(low[u], low[v]);
                }
            }
        if(par == -1 && child_count > 1)
            articulation_point = true;
    }

public:
    int minDays(vector<vector<int>>& grid) {
        const int n = grid.size(), m = grid[0].size();
        const int V = n * m;
        unordered_map<int, vector<int>> adj;
        int vertex_count = 0;
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
                if(grid[i][j]) {
                    int id = i * m + j;
                    adj[id] = {};
                    for(int k = 0; k < 4; k++) {
                        int r = i + delta[k], c = j + delta[(k+1) % 4]; //smart way to iterate over all 4 neighbours
                        if(r < n && c < m && r >= 0 && c >= 0 && grid[r][c]) {
                            int id_adj = r * m + c;
                            adj[id].push_back(id_adj);
                        }
                    }
                }
        
        if(adj.size() <= 1)
            return adj.size();

        bool multiple_dfs = 0;
        for(auto &it: adj)
            if(!low.count(it.first)) {
                if(multiple_dfs)
                    return 0;
                dfs(adj, it.first, -1);
                multiple_dfs = 1;
            }

        if(articulation_point)
            return 1;
        
        return 2;
    }
};
//question 87
class Solution {
    int n;
    vector<int> solve(string s){
        vector<int> vec(n);
        int i=0,j=0;
        vec[0]=n;
        for(int k=1;k<n;++k){
            if(k<=j){vec[k]=min(j-k+1,vec[k-i]);}
            while(k+vec[k]<n && s[vec[k]]==s[k+vec[k]]){vec[k]++;}
            if(k+vec[k]-1>j){i=k;    j=k+vec[k]-1;}
        }
        return vec;
    }
public:
    long long sumScores(string s) {
        n=s.size();
        vector<int> v=solve(s);
        long long ans=0;
        for(int i=0;i<n;++i){ans+=v[i];}
        return ans;
    }
};
