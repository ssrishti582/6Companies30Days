//question 34
class Solution {
public:
    int equalSubstring(string s, string t, int maxCost) {
        int n = s.length(), i = 0, j;
        for (j = 0; j < n; ++j) {
            if ((maxCost -= abs(s[j] - t[j])) < 0)
                maxCost += abs(s[i] - t[i++]);
        }
        return j - i;
    }
};
//question 35
class Solution {
public:
  int numFriendRequests(vector<int>& ages) {
    std::sort(ages.begin(), ages.end());
    int n = ages.size(), count = 0;

    for (int i = 0; i < n; ++i) {
      int low_index = std::upper_bound(ages.begin(), ages.end(), (ages[i] / 2) + 7) - ages.begin();
      int high_index = std::upper_bound(ages.begin(), ages.end(), ages[i]) - ages.begin();
      count += std::max(high_index - low_index - 1, 0);
    }

    return count;
  }
};

//question 36
class Solution {
public:
    int findLength(vector<int>& A, vector<int>& B) {
        int m = A.size(), n = B.size(), ans = 0;
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (A[i - 1] == B[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                    ans = max(ans, dp[i][j]);
                }
            }
        }
        return ans;
    }
};
